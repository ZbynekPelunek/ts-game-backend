// OLD CODE
/* adventuresRouter.post('/:adventureId/actions/:actionId', async (req: Request, res: Response) => {
  const { adventureId } = req.params;
  // const characterId = req.body.character.characterId;
  const actionId = req.params.actionId as AdventureActions;

  // get character from db with characterId from body
  const character = testCharacter;

  // check if adventure exists
  const adventure = allAdventures[allAdventures.findIndex((a) => a.adventureId === adventureId)];
  if (!adventure) {
    throw new NotFoundError(`Adventure with id ${adventureId} not found`);
  }

  switch (actionId) {
    case AdventureActions.START:
      // complete the adventure and save result
      const adventureStartResult = await startAdventure(adventure, character);
      console.log('Adventures in progress after start: ', character.adventures.filter(a => a.adventureState === AdventureState.IN_PROGRESS));

      // return result ID for future retrieval
      return res.status(201).json({ message: `Adventure ${adventure.name} started`, result: adventureStartResult });
    default:
      throw new NotFoundError(`Action ${actionId} not supported`);
  }
}) */
